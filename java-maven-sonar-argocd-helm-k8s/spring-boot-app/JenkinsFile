pipeline {
    agent any

    environment {
        // Define environment variables for Docker
        DOCKER_IMAGE = "purna577/springboot-app"        // Name of the Docker image to build
        DOCKER_TAG = "${env.BUILD_ID}"                  // Tag the image with the build ID
        REGISTRY = "docker.io"                          // Docker Hub Registry URL
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the source code from the Git repository
                git branch: 'main', url: 'https://github.com/purna-muddangula/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {  
                        script {
                            // Login to Docker Hub
                            withCredentials([usernamePassword(credentialsId:'sonar', usernameVariable: 'Username', passwordVariable: 'Password')]) {
                                sh '''
                                    mvn sonar:sonar \
                                    -Dsonar.projectKey=springboot-app \
                                    -Dsonar.host.url=https://3.6.126.115:9000 \
                                    -Dsonar.login=${Username} \
                                    -Dsonar.sonar.token=$Password
                                    '''
                         }   }
            }
          }

        
                        }
        stage('Build') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId:'3b6ca97e-a55c-4b4a-85df-4a3c61ce9f4f', usernameVariable: 'Username', passwordVariable: 'Password')]) {
                        sh 'docker login -u $Username -p $Password'
                    }
                    
                    // Tag and Push the Docker image to Docker Hub
                    sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                }
            }
        }

        stage('Cleanup') {
            steps {
                // Clean up the local Docker images to free up space
                sh 'docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true'
            }
        }

        stage('Update Docker Compose') {
            steps {
                script {
                    // Use the SSH credentials configured in Jenkins
                    withCredentials([sshUserPrivateKey(credentialsId: 'ssh-credentials-id', keyFileVariable: 'SSH_KEY')]) {
                        sh '''
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@172.31.1.214 <<EOF
# Update Docker Compose file
sed -i 's|purna577/springboot-app:.*|purna577/springboot-app:${DOCKER_TAG}|' /home/ubuntu/springboot-app/docker-compose.yml

# List files to ensure the file exists and has been updated
ls -lrta /home/ubuntu/springboot-app

# Restart the Docker Compose services
docker compose -f /home/ubuntu/springboot-app/docker-compose.yml up -d
EOF
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            // Send notifications or archive artifacts if necessary
            echo "Build finished. Cleaning up..."
        }
    }
}
