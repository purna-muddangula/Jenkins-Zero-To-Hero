pipeline {
    agent any

    environment {
        // Define environment variables for Docker
        DOCKER_IMAGE = "my-java-app"        // Name of the Docker image to build
        DOCKER_TAG = "${env.BUILD_ID}"      // Tag the image with the build ID
        REGISTRY = "my-docker-registry"     // If you're pushing to a private Docker registry, set the registry URL
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the source code from the Git repository
                git branch: 'main', url: 'https://github.com/purna-muddangula/Jenkins-Zero-To-Hero.git'
            }
        }
        
        stage('Build') {
            steps     {
                sh 'mvn clean install'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build Docker image from the Dockerfile in the project root
                script {
                    sh 'cd /home/ubuntu/Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app/target'
                    sh 'sudo docker build -f java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile -t $DOCKER_IMAGE:$DOCKER_TAG .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker (if pushing to a private registry)
                    // withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    //     sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS $REGISTRY'
                    // }
                    
                    // Push the Docker image to a registry
                    sh 'docker tag $DOCKER_IMAGE:$DOCKER_TAG $REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG'
                    sh 'docker push $REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG'
                }
            }
        }

        stage('Cleanup') {
            steps {
                // Clean up the local Docker images to free up space
                sh 'docker rmi $DOCKER_IMAGE:$DOCKER_TAG || true'
            }
        }
    }

    post {
        always {
            // Send notifications or archive artifacts if necessary
            echo "Build finished. Cleaning up..."
        }
    }
}
